// важность: 5
// 2.1 Привет, мир!
alert("Я JavaScript!")


// 2.5 Типы данных
let name = "Ilya";

alert(`hello ${1}`); // hello 1
alert(`hello ${"name"}`); // hello name
alert(`hello ${name}`); // hello Ilya


// 2.8 Базовые операторы, математика
let a = 1, b = 1;

let c = ++a; /* с=2 (префиксная форма → "с" присваивается новое значение "a")
                a=2 (значение было увеличено только один раз)*/
let d = b++; /* d=1, b=2 (постфиксная форма → "d" пристаивается старое значение "b")
                b=2 (значение было увеличено только один раз)*/
// ---------------------------------------------------------------------------------------------
// Какой результат будет у выражений ниже?
"" + 1 + 0;    // "10" (строка)
"" - 1 + 0;    // -1 (число; пустая строка "" приводится к 0)
true + false;  // 1 (число)
6 / "3";       // 2 (число)
"2" * "3";     // 6 (число)
4 + 5 + "px";  // "9px" (строка)
"$" + 4 + 5;   // "$45" (строка)
"4" - 2;       // 2 (число)
"4px" - 2;     // NaN (ошибка чтения числа на месте символа "px")
7 / 0;         // Infinity
"  -9  " + 5;  // "  -9  5" (строка)
"  -9  " - 5;  // -14 (число; "  -9  " превращается в число -9, пробелы по краям игнорируются)
null + 1;      // 1 (число; null — это 0 после численного преобразования)
undefined + 1; // NaN (underfined — это NaN после численного преобразования)
" \t \n" - 2;  // -2 (число; строка " \t \n" — это  0 после численного преобразования)
// --------------------------------------------------------------------------------------------
// Код в примере выводит 12, а результат должен быть 3.
let a = prompt("Первое число?", 1);
let b = prompt("Второе число?", 2);

/* alert(a + b);   вывод: 12    Ошибка: окно запроса возвращает строку, 
                               нужно использовать унарный плюс, чтобы преобразовать к числу*/
// Решение:
alert(+a + +b); // вывод: 3


// 2.9 Операторы сравнения
// Каким будет результат этих выражений?
5 > 4;               // true
"ананас" > "яблоко"; // false (посимвольное сравнение строк,"я">"а")
"2" > "12";          // true (посимвольное сравнение строк, "2">"1")
undefined == null;   // true (null и undefined равны (==) друг другу и не равны любому другому значению)
undefined === null;  // false (строгое сравнение разных типов)
null == "\n0\n";     // false (null равен (==) только undefined)
null === +"\n0\n";   // false (строгое сравнение разных типов)


// 2.10 Условное ветвление: if, '?'
// Выведется ли alert?
if ("0") {
    alert('Привет'); // да, выведется, т.к. "0" — не пустая строка => принимает значение "true"
}
// --------------------------------------------------------------------------------------------
// Перепишите конструкцию if с использованием условного оператора '?'
let result;

// if (a + b < 4) {
//     result = 'Мало';
// } else {
//     result = 'Много';
// }

// Ответ:
result(a + b < 4) ? 'Мало' : 'Много';
// --------------------------------------------------------------------------------------------
// Перепишите if..else с использованием нескольких операторов '?'
let message;

// if (login == 'Сотрудник') {
//     message = 'Привет';
// } else if (login == 'Директор') {
//     message = 'Здравствуйте';
// } else if (login == '') {
//     message = 'Нет логина';
// } else {
//     message = '';
// }

// Ответ:
message = (login == 'Сотрудник') ? 'Привет' :
    (login == 'Директор') ? 'Здравствуйте' :
        (login == '') ? 'Нет логина' : '';


// 2.11 Логические операторы
// Что выведет код ниже?
alert(null || 2 || undefined); // 2, т.к. это первое значение, которое даст true

alert(1 && null && 2); // null, т.к это первое ложное значение

alert(null || 2 && 3 || 4); /* выведет: 3. Сначала выполнится (2 && 3)=3; 
                              && возвращает последнее значение, если все верны,
                              ||— первое истинное: alert( null || 3 || 4 ), т.е. 3 */
// --------------------------------------------------------------------------------------------
// Какие из перечисленных ниже alert выполнятся?
// Какие конкретно значения будут результатами выражений в условиях if(...)?
if (-1 || 0) alert('first');         // Выполнится. || вернёт -1 (-1 принимает значение true)
if (-1 && 0) alert('second');        // Не выполнится. && вернёт 0 (0 принимает значение false)
if (null || -1 && 1) alert('third'); // Выполнится. && вернёт 1, || вернёт 1 (1 принимает значение true)


// 2.13 Циклы while и for
// При помощи цикла for выведите чётные числа от 2 до 10.
for (let i = 2; i < 11; i++) {
    if (i % 2 != 0) continue;
    alert(i);
}
// --------------------------------------------------------------------------------------------
// Перепишите код, заменив цикл for на while, без изменения поведения цикла
// for (let i = 0; i < 3; i++) {
//     alert(`number ${i}!`);
// }

let i = 0;
while (i < 3) {
    alert(`number ${i}!`);
    i++;
}
// --------------------------------------------------------------------------------------------
/* Напишите цикл, который предлагает prompt ввести число, большее 100.
Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.

Цикл должен спрашивать число пока либо посетитель не введёт число, большее 100,
либо не нажмёт кнопку Отмена (ESC).

Предполагается, что посетитель вводит только числа. 
Предусматривать обработку нечисловых строк в этой задаче необязательно */
let num;
do {
    num = prompt("Введите число, большее 100", "");
}
while (num <= 100 && num);


// 2.14 Конструкция "switch"
// Напишите if..else, соответствующий следующему switch:

// switch (browser) {
//     case 'Edge':
//         alert("You've got the Edge!");
//         break;

//     case 'Chrome':
//     case 'Firefox':
//     case 'Safari':
//     case 'Opera':
//         alert('Okay we support these browsers too');
//         break;

//     default:
//         alert('We hope that this page looks ok!');
// }


if (browser == 'Edge') {
    alert("You've got the Edge!");
}
else if (browser == 'Chrome' || browser == 'Firefox'
    || browser == 'Safari' || browser == 'Opera') {
    alert('Okay we support these browsers too');
}
else {
    alert('We hope that this page looks ok!');
}


